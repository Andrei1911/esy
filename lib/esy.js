// Generated by CoffeeScript 1.7.1
var Esy, esy;

Esy = (function() {
  function Esy() {
    this.file = new Esy.file;
    this.ui = new Esy.ui;
    this.http = new Esy.http;
    this.color = new Esy.color;
  }

  Esy.prototype.listProperties = function(obj) {
    var property, _i, _ref, _results;
    this.log("Esy.listProperties:");
    _results = [];
    for (property = _i = 1, _ref = obj.numProperties; 1 <= _ref ? _i <= _ref : _i >= _ref; property = 1 <= _ref ? ++_i : --_i) {
      _results.push(this.log(property));
    }
    return _results;
  };

  Esy.prototype.log = function(str) {
    try {
      return $.write("" + (str != null ? str.toString() : void 0) + "\n");
    } catch (_error) {}
  };

  Esy.prototype.dump = function(obj) {
    var propertyName, propertyValue, _results;
    if (obj) {
      this.log("Esy.dump:");
      _results = [];
      for (propertyName in obj) {
        propertyValue = obj[propertyName];
        _results.push(this.log("" + propertyName + ": " + (propertyValue != null ? propertyValue.toString() : void 0) + " \n"));
      }
      return _results;
    }
  };

  return Esy;

})();

Esy.file = (function() {
  function file() {}

  file.prototype["delete"] = function(filepath) {
    var file;
    file = File(filepath);
    return file.remove();
  };

  file.prototype.append = function(filepath, content) {
    var file;
    file = File(filepath);
    file.open("a");
    file.write(content);
    file.close();
    return file;
  };

  file.prototype.create = function(filepath, content) {
    var file;
    if (content == null) {
      content = "";
    }
    file = new File(filepath);
    file.open("w");
    file.write(content);
    file.close();
    return file;
  };

  file.prototype.read = function(filepath) {
    var content, file;
    file = File(filepath);
    file.open("r");
    content = file.read();
    file.close();
    return content;
  };

  file.prototype.filename = function(filepath) {
    var filename;
    filename = filepath.substr(filepath.lastIndexOf('/') + 1);
    return filename;
  };

  return file;

})();

Esy.ui = (function() {
  function ui() {
    this.sizes = {};
    this.window = null;
    this.currentPanel = null;
    this.panels = [];
    this.buttons = [];
    this.textbox = [];
  }

  ui.prototype.set = function(width, paddingLeft, paddingTop) {
    if (width == null) {
      width = 300;
    }
    if (paddingLeft == null) {
      paddingLeft = 10;
    }
    if (paddingTop == null) {
      paddingTop = 10;
    }
    this.sizes.paddingLeft = paddingLeft;
    this.sizes.paddingTop = paddingTop;
    this.sizes.width = width;
    this.sizes.heightIncrement = 0;
    if (esy.container instanceof Panel) {
      this.window = esy.container;
    } else {
      this.window = new Window("window {orientation: 'row'}");
    }
    return this;
  };

  ui.prototype.show = function() {
    if (!(esy.container instanceof Panel)) {
      this.window.show();
    }
    return this;
  };

  ui.prototype.addPanel = function(label) {
    this.panels[label] = this.currentRow = this.window.add('panel', this.returnGoodUIValues(60, false), label);
    return this;
  };

  ui.prototype.getRow = function(label) {
    return this.panels[label];
  };

  ui.prototype.addButton = function(label, height, offsets) {
    if (height == null) {
      height = 30;
    }
    if (offsets == null) {
      offsets = [10, 10, -10, 0];
    }
    this.buttons[label] = this.window.add('button', this.returnGoodUIValues(height, true, offsets), label);
    this.currentRow.size.height += height + offsets[1] * 2;
    return this;
  };

  ui.prototype.getButton = function(label) {
    return this.buttons[label];
  };

  ui.prototype.addTextbox = function(label, showLabel, height, offsets) {
    if (showLabel == null) {
      showLabel = false;
    }
    if (height == null) {
      height = 30;
    }
    if (offsets == null) {
      offsets = [10, 10, -10, 0];
    }
    this.textbox[label] = this.window.add('editText', this.returnGoodUIValues(height, true, offsets), "");
    return this;
  };

  ui.prototype.getTextbox = function(label) {
    return this.textbox[label];
  };

  ui.prototype.returnGoodUIValues = function(height, increment, adaptSizes) {
    var i, key, sizes, value, values, _ref;
    if (increment == null) {
      increment = true;
    }
    if (adaptSizes == null) {
      adaptSizes = [0, 0, 0, 0];
    }
    sizes = [];
    i = 0;
    _ref = this.sizes;
    for (key in _ref) {
      value = _ref[key];
      sizes[key] = value + adaptSizes[i];
      i++;
    }
    values = [sizes.paddingLeft, sizes.paddingTop + this.sizes.heightIncrement, sizes.width, sizes.paddingTop + this.sizes.heightIncrement + height];
    this.sizes.heightIncrement += sizes.paddingTop;
    if (increment === true) {
      this.sizes.heightIncrement += height;
    }
    return values;
  };

  return ui;

})();

Esy.color = (function() {
  function color() {}

  color.prototype.hexToRgb = function(hex) {
    var b, g, r;
    hex = parseInt(hex, 16);
    r = hex >> 16;
    g = (hex & 0x00ff00) >> 8;
    b = hex & 0xff;
    return [r, g, b];
  };

  color.prototype.hexToHsl = function(hex) {
    var b, g, r;
    hex = parseInt(hex, 16);
    r = hex >> 16;
    g = (hex & 0x00ff00) >> 8;
    b = hex & 0xff;
    return [r / 255, g / 255, b / 255];
  };

  return color;

})();

Esy.http = (function() {
  function http() {}

  http.prototype.open = function(url) {
    var command;
    if ($.os.indexOf("Windows") !== -1) {
      url = url.replace(/&/g, "^&");
      command = "cmd /c 'explorer " + url + "'";
    } else {
      command = "open '" + url + "'";
    }
    return system.callSystem(command);
  };

  http.prototype.get = function(url) {
    var call, conn, domain, httpPrefix, reply, typeMatch;
    httpPrefix = url.match(/http:\/\//);
    domain = (httpPrefix == null ? url.split("/")[0] + ":" + port : url.split("/")[2] + ":" + port);
    call = "GET " + (httpPrefix == null ? "http://" + url : url) + " HTTP/1.0\r\nHost:" + (httpPrefix == null ? url.split("/")[0] : url.split("/")[2]) + "\r\nConnection: close\r\n\r\n";
    reply = new String();
    conn = new Socket();
    typeMatch = url.match(/(\.)(\w{3,4}\b)/g);
    if (conn.open(domain, "binary")) {
      conn.write(call);
      reply = conn.read(9999999999);
      conn.close();
    } else {
      reply = "";
    }
    return reply.substr(reply.indexOf("\r\n\r\n") + 4);
  };

  return http;

})();

esy = new Esy();

esy.container = this;
