// Generated by CoffeeScript 1.6.3
var Esy, esy;

Esy = (function() {
  var dump, log;

  function Esy() {
    this.file = new Esy.file;
    this.ui = new Esy.ui;
    this.http = new Esy.http;
  }

  Esy.prototype.listProperties = function(obj) {
    var property, _i, _ref, _results;
    $.write(obj.numProperties);
    _results = [];
    for (property = _i = 1, _ref = obj.numProperties; 1 <= _ref ? _i <= _ref : _i >= _ref; property = 1 <= _ref ? ++_i : --_i) {
      _results.push(this.write(property));
    }
    return _results;
  };

  log = function(str) {
    return $.write("" + (str != null ? str.toString() : void 0) + "\n");
  };

  dump = function(obj) {
    var propertyName, propertyValue, _results;
    if (obj) {
      $.write("\n Dumping: \n --- \n");
      _results = [];
      for (propertyName in obj) {
        propertyValue = obj[propertyName];
        _results.push(log("" + propertyName + ": " + (propertyValue != null ? propertyValue.toString() : void 0) + " \n"));
      }
      return _results;
    }
  };

  return Esy;

})();

Esy.file = (function() {
  function file() {}

  file.prototype["delete"] = function(filepath) {
    var file;
    file = File(filepath);
    return file.remove();
  };

  file.prototype.create = function(filepath, content) {
    var file;
    if (content == null) {
      content = "";
    }
    file = new File(filepath);
    file.open("w");
    file.write(content);
    file.close();
    return file;
  };

  file.prototype.read = function(filepath) {
    var content, file;
    file = File(filepath);
    file.open("r");
    content = file.read();
    file.close();
    return content;
  };

  return file;

})();

Esy.ui = (function() {
  function ui() {}

  return ui;

})();

Esy.http = (function() {
  function http() {}

  http.prototype.open = function(url) {
    var command;
    if ($.os.indexOf("Windows") !== -1) {
      url = url.replace(/&/g, "^&");
      command = "cmd /c 'explorer " + url + "'";
    } else {
      command = "open '" + url + "'";
    }
    return system.callSystem(command);
  };

  http.prototype.get = function(url) {
    var call, conn, domain, httpPrefix, reply, typeMatch;
    httpPrefix = url.match(/http:\/\//);
    domain = (httpPrefix == null ? url.split("/")[0] + ":" + port : url.split("/")[2] + ":" + port);
    call = "GET " + (httpPrefix == null ? "http://" + url : url) + " HTTP/1.0\r\nHost:" + (httpPrefix == null ? url.split("/")[0] : url.split("/")[2]) + "\r\nConnection: close\r\n\r\n";
    reply = new String();
    conn = new Socket();
    typeMatch = url.match(/(\.)(\w{3,4}\b)/g);
    if (conn.open(domain, "binary")) {
      conn.write(call);
      reply = conn.read(9999999999);
      conn.close();
    } else {
      reply = "";
    }
    return reply.substr(reply.indexOf("\r\n\r\n") + 4);
  };

  return http;

})();

String.prototype.capitalize = function() {
  return this.replace(/(?:^|\s)\S/g, function(a) {
    return a.toUpperCase();
  });
};

esy = new Esy();
